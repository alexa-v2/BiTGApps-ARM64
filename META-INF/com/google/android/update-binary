#!/sbin/sh
#
##############################################################
# File name       : update-binary
#
# Description     : Installation script for BiTGApps
#
# Build Date      : Friday March 15 11:36:43 IST 2019
#
# Updated on      : Thursday July 18 12:26:31 IST 2019
#
# GitHub          : TheHitMan7 <krtik.vrma@gmail.com>
#
# BiTGApps Author : TheHitMan @ xda-developers
#
# Copyright       : Copyright (C) 2019 TheHitMan7
#
# License         : SPDX-License-Identifier: GPL-3.0-or-later
#
# The BiTGApps scripts are free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version, w/BiTGApps installable zip exception.
#
# These scripts are distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##############################################################

# This command should be executed before any other command
# FIX IT: 32-bit binary in 64-bit system
recovery_actions() {
  OLD_LD_LIB=$LD_LIBRARY_PATH
  OLD_LD_PRE=$LD_PRELOAD
  OLD_LD_CFG=$LD_CONFIG_FILE
  unset LD_LIBRARY_PATH
  unset LD_PRELOAD
  unset LD_CONFIG_FILE
}
recovery_actions;

export ZIPFILE="$3"
export OUTFD="/proc/self/fd/$2"
export TMP="/tmp"

case "$(uname -m)" in
  *86*) export BINARCH="x86";; # e.g. Zenfone is i686
  *ar*) export BINARCH="arm";; # i.e. armv7l and aarch64
esac

bb="$TMP/busybox-$BINARCH"
l="$TMP/bin"

# selinux
setenforce 0

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}

set_progress() { echo "set_progress $1" > "$OUTFD"; }

# Restore LD Path
recovery_cleanup() {
  [ -z $OLD_LD_LIB ] || export LD_LIBRARY_PATH=$OLD_LD_LIB
  [ -z $OLD_LD_PRE ] || export LD_PRELOAD=$OLD_LD_PRE
  [ -z $OLD_LD_CFG ] || export LD_CONFIG_FILE=$OLD_LD_CFG
}

cleanup() {
  rm -rf /tmp/unzip;
  rm -rf /tmp/zip;
}

clean_logs() {
  rm -rf /cache/bitgapps;
}

unmount_all() {
ui_print " "
 if [ "$device_abpartition" = "true" ]; then
     mount -o ro $SYSTEM_MOUNT
 else
     umount $SYSTEM_MOUNT
 fi;
}

abort() {
  ui_print "$*";
  unmount_all;
  clean_logs;
  cleanup;
  exit 1;
}

# package defaults
PKG="BiTGApps"
VER="7.1.2"
DATE="Wed Aug 21 10:04:44 IST 2019"
ID="0.3"
VER_SDK="25"
AUTH="TheHitMan @ xda-developers"

set_progress 1.34 4;
ui_print " ";

DUMMY_FILE=unzip/placeholder
ZIP="
  zip/core/priv_app_ConfigUpdater.zip
  zip/core/priv_app_GoogleBackupTransport.zip
  zip/core/priv_app_GoogleExtServices.zip
  zip/core/priv_app_GoogleLoginService.zip
  zip/core/priv_app_GoogleServicesFramework.zip
  zip/core/priv_app_Phonesky.zip
  zip/core/priv_app_PrebuiltGmsCore.zip
  zip/sys/sys_app_FaceLock.zip
  zip/sys/sys_app_GoogleContactsSyncAdapter.zip
  zip/sys/sys_app_GoogleExtShared.zip
  zip/ADDOND.zip
  zip/sys_Config_Permission.zip
  zip/sys_Default_Permission.zip
  zip/sys_Framework.zip
  zip/sys_Lib.zip
  zip/sys_Lib64.zip
  zip/sys_Permissions.zip
  zip/sys_Pref_Permission.zip"

for f in $DUMMY_FILE $ZIP busybox-arm enforce.sh g.prop installer.sh pm.sh sqlite3; do
  unzip -o "$ZIPFILE" "$f" -d "$TMP";
done

for f in busybox-arm enforce.sh installer.sh pm.sh sqlite3; do
  chmod +x "$TMP/$f";
done

ui_print "**************** BiTGApps $ID *****************";
ui_print "Custom GApps Package : BiTGApps                ";
ui_print "Developed By         : TheHitMan               ";
ui_print "***********************************************";

ui_print " ";

ui_print "Installing toolbox";
if [ -e "$bb" ]; then
  install -d "$l"
  for i in $($bb --list); do
    if ! ln -sf "$bb" "$l/$i" && ! $bb ln -sf "$bb" "$l/$i" && ! $bb ln -f "$bb" "$l/$i" ; then
      # create script wrapper if symlinking and hardlinking failed because of restrictive selinux policy
      if ! echo "#!$bb" > "$l/$i" || ! chmod +x "$l/$i" ; then
        ui_print "ERROR 10: Failed to set-up pre-bundled busybox";
        exit 1
      fi
    fi
  done
else
  ui_print "No match found !";
  exit 1
fi

ui_print " ";

ui_print "Mount Partitions";
# Detect A/B partition layout https://source.android.com/devices/tech/ota/ab_updates
# and system-as-root https://source.android.com/devices/bootloader/system-as-root
if [ -n "$(cat /proc/cmdline | grep slot_suffix)" ];
then
  device_abpartition=true
  SYSTEM_MOUNT=/system
  SYSTEM=$SYSTEM_MOUNT/system
  SYSTEM_VENDOR=/system/vendor
elif [ -n "$(cat /etc/fstab | grep /system_root)" ];
then
  device_abpartition=false
  SYSTEM_MOUNT=/system_root
  SYSTEM=$SYSTEM_MOUNT/system
  SYSTEM_VENDOR=/system/vendor
else
  device_abpartition=false
  SYSTEM_MOUNT=/system
  SYSTEM=$SYSTEM_MOUNT
  SYSTEM_VENDOR=/system/vendor
fi

PROPFILES="$SYSTEM/build.prop $SYSTEM_VENDOR/build.prop"

get_file_prop() {
  grep -m1 "^$2=" "$1" | cut -d= -f2
}

get_prop() {
  #check known .prop files using get_file_prop
  for f in $PROPFILES; do
    if [ -e "$f" ]; then
      prop="$(get_file_prop "$f" "$1")"
      if [ -n "$prop" ]; then
        break #if an entry has been found, break out of the loop
      fi
    fi
  done
  #if prop is still empty; try to use recovery's built-in getprop method; otherwise output current result
  if [ -z "$prop" ]; then
    getprop "$1" | cut -c1-
  else
    printf "$prop"
  fi
}

mounts=""
for p in "/cache" "/data" "/persist" "$SYSTEM_MOUNT"; do
  if [ -d "$p" ] && grep -q "$p" "/etc/fstab" && ! mountpoint -q "$p"; then
    mounts="$mounts $p"
  fi
done
ui_print " ";
set_progress 0.01;
for m in $mounts; do
  mount "$m"
done
# remount whatever $SYSTEM_MOUNT is, sometimes necessary if mounted read-only
grep -q "$SYSTEM_MOUNT.*\sro[\s,]" /proc/mounts && mount -o remount,rw $SYSTEM_MOUNT

android_sdk="$(get_prop "ro.build.version.sdk")";
supported_sdk="25";
android_version="$(get_prop "ro.build.version.release")";
supported_version="7.1.2";

ui_print "Checking Android SDK version";
if [ "$android_sdk" == "$supported_sdk" ]; then
    ui_print "$android_sdk";
    ui_print " ";
else
    ui_print " ";
    abort "Unsupported Android SDK version. Aborting...";
    ui_print " ";
fi;

ui_print "Checking Android version";
if [ "$android_version" == "$supported_version" ]; then
    ui_print "$android_version";
    ui_print " ";
else
    ui_print " ";
    abort "Unsupported Android version. Aborting...";
    ui_print " ";
fi;

ui_print "Installing";
clean_logs;
PATH="$l:$PATH" $bb ash "$TMP/installer.sh" "$@"
PATH="$l:$PATH" $bb ash "$TMP/enforce.sh" "$@"

ui_print " ";

ui_print "Unmount Partitions";
cleanup;
recovery_cleanup;
unmount_all;

ui_print "Done!";
ui_print " ";
ui_print "****************** Software *******************";
ui_print "Custom GApps    : $PKG";
ui_print "Android version : $VER";
ui_print "SDK version     : $VER_SDK";
ui_print "Build date      : $DATE";
ui_print "Build ID        : $ID";
ui_print "Developed By    : $AUTH";
ui_print "***********************************************";
ui_print " ";
