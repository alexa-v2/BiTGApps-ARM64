#!/sbin/sh
#
##############################################################
# File name       : update-binary
#
# Requirement     : Magisk
#
# Description     : Installation script for BiTGApps
#
# Build Date      : Friday March 15 11:36:43 IST 2019
#
# GitHub          : TheHitMan7 <krtik.vrma@gmail.com>
#
# BiTGApps Author : TheHitMan @ xda-developers
#
# Copyright       : Copyright (C) 2019 TheHitMan7
#
# License         : SPDX-License-Identifier: GPL-3.0-or-later
##############################################################

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";
DIR=`dirname "$ZIPFILE"`;
export ZIPFILE="$3"
export OUTFD="/proc/self/fd/$2"
export TMP="/tmp"

# package defaults
PKG="BiTGApps"
VER="9.0.0"
DATE="Sat Jun 08 22:32:04 IST 2019"
ID="0.9"
VER_SDK="28"
AUTH="TheHitMan @ xda-developers"

case "$(uname -m)" in
  *86*) export BINARCH="x86";;  # e.g. Zenfone is i686
  *ar*) export BINARCH="arm";; # i.e. armv7l and aarch64
esac

bb="$TMP/install/tools/busybox-$BINARCH"

# selinux
setenforce 0

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}

show_progress() { echo "progress $1 $2" > $OUTFD; }
file_getprop() { $bb grep "^$2=" "$1" | $bb cut -d= -f2-; }
int2ver() {
  if [ "$1" -eq "$1" ] 2>/dev/null; then 
    echo "$1.0.0";
  elif [ ! "$(echo "$1" | $bb cut -d. -f3)" ]; then
    echo "$1.0";
  else
    echo "$1";
  fi;
}

cleanup() {
  cd /tmp;
  rm -rf /tmp/install;
}

logd() {
  rm -rf /cache/bitgapps;
}

is_mounted() {
  grep -q " `readlink -f $1` " /proc/mounts 2>/dev/null
  return $?
}

unmount_all() {
  (umount -l /system_root 2>/dev/null;
  umount -l /system 2>/dev/null;
  umount -l /vendor) 2>/dev/null;
}

recovery_actions() {
  # Make sure random don't get blocked
  mount -o bind /dev/urandom /dev/random
  # Unset library paths
  OLD_LD_LIB=$LD_LIBRARY_PATH
  OLD_LD_PRE=$LD_PRELOAD
  OLD_LD_CFG=$LD_CONFIG_FILE
  unset LD_LIBRARY_PATH
  unset LD_PRELOAD
  unset LD_CONFIG_FILE
}

recovery_cleanup() {
  [ -z $OLD_LD_LIB ] || export LD_LIBRARY_PATH=$OLD_LD_LIB
  [ -z $OLD_LD_PRE ] || export LD_PRELOAD=$OLD_LD_PRE
  [ -z $OLD_LD_CFG ] || export LD_CONFIG_FILE=$OLD_LD_CFG
}

abort() {
  ui_print "$*";
  if [ ! -f init.sh -o "$(file_getprop init.sh do.cleanuponabort 2>/dev/null)" == 1 ]; then
    cleanup;
  fi;
  unmount_all;
  exit 1;
}

show_progress 1.34 4;
ui_print " ";
cleanup;
logd;
mkdir -p /tmp/install;

# Workspace
cd /tmp/install

INSTALLER_SCRIPT="
  META-INF/com/google/android/updater-script
  META-INF/com/google/android/update-binary"
BUILD_TOOLS="
  tools/busybox
  tools/busybox-arm
  tools/tar-arm
  tools/unzip-arm
  tools/zipalign
  tools/zip-arm"
DUMMY_FILE=unzip/placeholder
ZIP="
  zip/core/priv_app_AndroidPlatformServices.zip
  zip/core/priv_app_CarrierSetup.zip
  zip/core/priv_app_ConfigUpdater.zip
  zip/core/priv_app_GmsCoreSetupPrebuilt.zip
  zip/core/priv_app_GoogleBackupTransport.zip
  zip/core/priv_app_GoogleExtServices.zip
  zip/core/priv_app_GoogleRestore.zip
  zip/core/priv_app_GoogleServicesFramework.zip
  zip/core/priv_app_Phonesky.zip
  zip/core/priv_app_PrebuiltGmsCorePi.zip
  zip/core/priv_app_WellbeingPrebuilt.zip
  zip/sys/sys_app_FaceLock.zip
  zip/sys/sys_app_GoogleContactsSyncAdapter.zip
  zip/sys/sys_app_GoogleExtShared.zip
  zip/sys/sys_app_MarkupGoogle.zip
  zip/sys/sys_app_SoundPickerPrebuilt.zip
  zip/ADDOND.zip
  zip/g.prop
  zip/sys_Config_Permission.zip
  zip/sys_Default_Permission.zip
  zip/sys_Framework.zip
  zip/sys_Lib.zip
  zip/sys_Lib64.zip
  zip/sys_Permissions.zip
  zip/sys_Pref_Permission.zip"

for f in $INSTALLER_SCRIPT $BUILD_TOOLS $DUMMY_FILE $ZIP init.sh installer.sh mount.sh mount_ab.sh selinux_context.sh set-defaults.sh umount.sh zipalign.sh; do
  unzip -o "$ZIPFILE" "$f" -d "$TMP/install";
done

UNIX_PERMISSION="
  /tmp/install/tools/busybox
  /tmp/install/tools/busybox-arm
  /tmp/install/tools/tar-arm
  /tmp/install/tools/unzip-arm
  /tmp/install/tools/zipalign
  /tmp/install/tools/zip-arm
  /tmp/install/init.sh
  /tmp/install/installer.sh
  /tmp/install/mount.sh
  /tmp/install/mount_ab.sh
  /tmp/install/selinux_context.sh
  /tmp/install/set-defaults.sh
  /tmp/install/umount.sh
  /tmp/install/zipalign.sh"

for f in $UNIX_PERMISSION; do
  chmod 0755 "$f";
done

ui_print "**************** BiTGApps $ID *****************";
ui_print "Custom GApps Package : BiTGApps                ";
ui_print "Developed By         : TheHitMan               ";
ui_print "***********************************************";

ui_print "$(file_getprop init.sh build.string)";
if [ -f version ]; then
  ui_print " ";
  while IFS='' read -r line || $bb [[ -n "$line" ]]; do
    ui_print "$line";
  done < version;
  ui_print " ";
fi;

ui_print " ";
recovery_actions

ui_print "Mounting Partitions";

ui_print " ";

# Run-program
is_mounted /data || mount /data || is_mounted /cache || mount /cache || abort "! Unable to mount partitions"

# Run unmount script
PATH="/tmp/install:$PATH" $bb ash umount.sh $2;

# Run A-only mount script
PATH="/tmp/install:$PATH" $bb ash mount.sh $2;

# Run A/B mount script
PATH="/tmp/install:$PATH" $bb ash mount_ab.sh $2;

if [ ! "$(getprop 2>/dev/null)" ]; then
  getprop() {
    local propval="$(file_getprop /default.prop $1 2>/dev/null)";
    test "$propval" || local propval="$(file_getprop /system/build.prop $1 2>/dev/null)";
    test "$propval" && echo "$propval" || echo "";
  }
elif [ ! "$(getprop ro.product.device 2>/dev/null)" -a ! "$(getprop ro.build.product 2>/dev/null)" ]; then
  getprop() {
    ($(which getprop) | $bb grep "$1" | $bb cut -d[ -f3 | $bb cut -d] -f1) 2>/dev/null;
  }
fi;

if [ "$(file_getprop init.sh do.devicecheck)" == 1 ]; then
  ui_print "Checking SDK Version...";
  device="$(file_getprop /system/build.prop ro.build.version.sdk)";
  for testname in $(file_getprop init.sh 'supported.sdk'); do
    if [ "$device" == "$testname" ]; then
      ui_print "$testname";
      match=1;
      break;
    fi;
  done;
  ui_print " ";
  if [ ! "$match" ]; then
    ui_print "Installed SDK : $device";
    ui_print "Required  SDK : $testname";
    abort "Unsupported SDK Version. Aborting...";
    ui_print " ";
  fi;
fi;

supported_ver="$(file_getprop init.sh supported.versions | $bb tr -d '[:space:]')";
if [ "$supported_ver" ]; then
  ui_print "Checking Android version...";
  android_ver="$(file_getprop /system/build.prop ro.build.version.release)";
  android_density_system="$(file_getprop /system/build.prop ro.sf.lcd_density)";
  android_density_vendor="$(file_getprop /system/vendor/build.prop ro.sf.lcd_density)";
  if [ "$(echo $supported_ver | $bb grep -)" ]; then
    lo_ver=$(echo $supported_ver | $bb cut -d- -f1);
    hi_ver=$(echo $supported_ver | $bb cut -d- -f2);
    if [ "$(echo -e "$(int2ver $hi_ver)\n$(int2ver $lo_ver)\n$(int2ver $android_ver)" | $bb sort -g | $bb grep -n "$(int2ver $android_ver)" | $bb grep '^2:')" ]; then
      supported=1;
    fi;
  else
    for ver in $(echo $supported_ver | $bb sed 's;,; ;g'); do
      if [ "$(int2ver $ver)" == "$(int2ver $android_ver)" ]; then
        supported=1;
        break;
      fi;
    done;
  fi;
  if [ "$supported" ]; then
    ui_print "$android_ver";
    ui_print " ";
    ui_print "LCD Density...";
    ui_print "$android_density_system";
    ui_print "$android_density_vendor";
    ui_print " ";
  else
    ui_print " ";
    ui_print "Installed Android Version : $android_ver";
    ui_print "Required  Android Version : $supported_ver";
    abort "Unsupported Android Version. Aborting...";
    ui_print " ";
  fi;
fi;

ui_print "Installing...";
PATH="/tmp/install:$PATH" $bb ash init.sh $2;
if [ $? != 0 ]; then
  abort;
fi;

if [ "$(file_getprop init.sh do.cleanup)" == 1 ]; then
  cleanup;
fi;

# Force cleanup
recovery_cleanup

# Do not remove this
unmount_all;

ui_print "Done!";
ui_print " ";
ui_print "****************** Software *******************";
ui_print "Custom GApps    : $PKG";
ui_print "Android version : $VER";
ui_print "SDK version     : $VER_SDK";
ui_print "Build date      : $DATE";
ui_print "Build ID        : $ID";
ui_print "Developed By    : $AUTH";
ui_print "***********************************************";
ui_print " ";
